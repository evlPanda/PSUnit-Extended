import TTS_UNITTEST:TestBase;
import TTS_UNITTEST:Exceptions:AssertFailed;
import XX_UNIT_TEST:HTML;

class Base extends TTS_UNITTEST:TestBase
   property string className;
   property string description;
   property any expectedResult;
   property any actualResult;
   property UQ_UNIT_TEST:HTML HTML;
   method Base(&className_ As string);
   method teardown();
   method test();
   method doTest();
   method Assert(&isTrue As boolean, &onFail As string);
   method AssertStringsEqual(&str1 As string, &str2 As string, &onFail As string);
   method AssertNumbersEqual(&num1 As number, &num2 As number, &onFail As string);
   method getFailMessage() Returns string;
   method passTest();
   method failTest();
   method passClass();
end-class;

method Base
   /+ &className_ as String +/
   %Super = create TTS_UNITTEST:TestBase(&className_);
   %This.HTML = create UQ_UNIT_TEST:HTML();
   %This.className = &className_;
   %This.HTMLMsg(%This.HTML.getClassName(%This.className));
   %This.HTMLMsg(%This.HTML.tableStart);
   %This.HTMLMsg(%This.HTML.columnHeadings);
end-method;

method test
   %This.doTest();
   %This.passTest();
end-method;

method doTest
   Evaluate True
   When %This.expectedResult /* boolean */
   When ( Not %This.expectedResult)
      %This.Assert((%This.expectedResult = %This.actualResult), %This.getFailMessage());
      Return;
   When IsNumber(%This.expectedResult) /* number */
      %This.AssertNumbersEqual(%This.expectedResult, %This.actualResult, %This.getFailMessage());
      Return;
   When IsAlphaNumeric(%This.expectedResult) /* string */
   When IsAlpha(%This.expectedResult)
   When IsDigits(%This.expectedResult)
      %This.AssertStringsEqual(%This.expectedResult, %This.actualResult, %This.getFailMessage());
      Return;
   End-Evaluate;
end-method;

method Assert
   /+ &isTrue as Boolean, +/
   /+ &onFail as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.Assert +/
   If &isTrue Then
      Return;
   End-If;
   %This.failTest();
   throw create TTS_UNITTEST:Exceptions:AssertFailed(&onFail);
end-method;

method AssertStringsEqual
   /+ &str1 as String, +/
   /+ &str2 as String, +/
   /+ &onFail as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.AssertStringsEqual +/
   If &str1 = &str2 Then
      Return;
   End-If;
   Local string &msg = &str1 | " <> " | &str2 | "! " | &onFail;
   throw create TTS_UNITTEST:Exceptions:AssertFailed(&msg);
   %This.failTest();
end-method;

method AssertNumbersEqual
   /+ &num1 as Number, +/
   /+ &num2 as Number, +/
   /+ &onFail as String +/
   /+ Extends/implements TTS_UNITTEST:TestBase.AssertNumbersEqual +/
   If &num1 = &num2 Then
      Return;
   End-If;
   Local string &msg = String(&num1) | " <> " | String(&num2) | "! " | &onFail;
   throw create TTS_UNITTEST:Exceptions:AssertFailed(&msg);
   %This.failTest();
end-method;

method getFailMessage
   /+ Returns String +/
   Return "Expected: '" | %This.expectedResult | "', Actual: '" | %This.actualResult | "'";
end-method;

method passTest
   Local string &testResult;
   &testResult = %This.HTML.testResult(%This.description, %This.expectedResult, %This.actualResult, %This.HTML.pass);
   %This.HTMLMsg(&testResult);
end-method;

method failTest
   Local string &testResult;
   &testResult = %This.HTML.testResult(%This.description, %This.expectedResult, %This.actualResult, %This.HTML.fail);
   %This.HTMLMsg(&testResult);
end-method;

method passClass
   %This.HTMLMsg("<tr><td colspan=3 align=left><b>" | %This.className | "</b></td><td><b>" | %This.HTML.pass | "<b></td></tr>");
end-method;

method teardown
   /+ Extends/implements TTS_UNITTEST:TestBase.Teardown +/
   %This.HTMLMsg("</table><br>");
end-method;
